@model PizzaWebsite.Models.ManageStoresViewModel

@{
    ViewBag.Title = "Manage Stores";
}

<h2>Manage Stores</h2>

<div>

    @using (Html.BeginForm("ManageStores", "ManageWebsite", FormMethod.Get))
    {
        <input type="hidden" name="Page" value="1" />
        @Html.Hidden("RowsPerPage", Request["RowsPerPage"])
        @Html.Label("StoreName", "Store Name")
        @Html.TextBox("StoreName", Request["StoreName"], new { @class = "form-control" })
        @Html.Label("PhoneNumber", "Phone Number")
        @Html.TextBox("PhoneNumber", Request["PhoneNumber"], new { @class = "form-control" })
        <input type="submit" value="Apply Search Filters" class="btn btn-default" />
    }
</div>

<div>
    <a href="@Url.Action("CreateStoreLocation", "ManageWebsite")?@(Request.QueryString)">
        <input type="button" value="Create New Store" class="btn btn-default" />
    </a>
</div>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.StoreLocationVm.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.StoreLocationVm.StreetAddress)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.StoreLocationVm.City)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.StoreLocationVm.ZipCode)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.StoreLocationVm.PhoneNumber)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.StoreLocationVm.IsActiveLocation)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model.StoreLocationVmList)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StreetAddress)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.City)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ZipCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PhoneNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IsActiveLocation)
            </td>
            <td>
                <a href="@Url.Action("EditStoreLocation", "ManageWebsite")/@item.Id?@(Request.QueryString)">
                    <input type="button" value="Edit" class="btn btn-default" />
                </a>
            </td>
        </tr>
    }
</table>
<nav aria-label="Page navigation example">
    <ul class="pagination">
    </ul>
</nav>
@section Scripts {
    <script type="text/javascript">
    $(function () {
        var totalItems = @Model.PaginationVm.TotalNumberOfItems;
        var rowsPerPage = @Model.PaginationVm.RowsPerPage;
        var currentPage = @Model.PaginationVm.CurrentPage;
        var totalPages = @Model.PaginationVm.TotalPages;
        var isOnLastPage = currentPage === totalPages;
        var isOnFirstPage = currentPage === 1;

        $(".pagination").paging(totalItems, { // Total number of items (elements)
            // Set up onclick handler
            onClick: function (ev) {
            },
            format: '[< ncnnn! >]', // define how the navigation should look like and in which order onFormat() get's called
            perpage: rowsPerPage, // show 10 elements per page
            lapping: 0, // don't overlap pages for the moment
            page: currentPage, // start at page, can also be "null" or negative
	        onSelect: function (page) {
		        // add code which gets executed when user selects a page, how about $.ajax() or $(...).slice()?
                //console.log(this);
	        },
            onFormat: function (type) { // Gets called for each character of "format" and returns a HTML representation
                var page = this.value;
                const params = new URLSearchParams(window.location.search);
                params.set('Page', page);
                var hrefValue = `${location.pathname}?${params.toString()}`;

		        switch (type) {
                    case 'block': // n and c
                        {
                            if (page === currentPage) {
                                return `<li class="page-item active" aria-current="page"><a class="page-link" href="#">${page}</a></li>`;
                            } else {
                                return `<li class="page-item"><a class="page-link" href="${hrefValue}">${page}</a></li>`;
                            }
                        }
                    case 'next': // >
                        {
                            if (isOnLastPage) {
                                return `<li class="page-item disabled"><a class="page-link" href="#" aria-disabled="true"><span aria-hidden="true">&raquo;</span></a></li>`;
                            } else {
                                return `<li class="page-item"><a class="page-link" href="${hrefValue}" aria-label="Next"><span aria-hidden="true">&raquo;</span></a></li>`;
                            }
                        }
                    case 'prev': // <<
                        {
                            if (isOnFirstPage) {
                                return `<li class="page-item disabled"><a class="page-link" href="#" aria-disabled="true"><span aria-hidden="true">&laquo;</span></a></li>`;
                            } else {
                                return `<li class="page-item"><a class="page-link" href="${hrefValue}" aria-label="Next"><span aria-hidden="true">&laquo;</span></a></li>`;
                            }
                        }
                    case 'first': // [
                        {
                            if (isOnFirstPage) {
                                return `<li class="page-item disabled"><a class="page-link" href="#" aria-disabled="true">First</a></li>`;
                            } else {
                                return `<li class="page-item"><a class="page-link" href="${hrefValue}">First</a></li>`;
                            }
                        }
                    case 'last': // ]
                        {
                            if (isOnLastPage) {
                                return `<li class="page-item disabled"><a class="page-link" href="#" aria-disabled="true">Last</a></li>`;
                            } else {
                                return `<li class="page-item"><a class="page-link" href="${hrefValue}">Last</a></li>`;
                            }
                        }
                        
		        }
	        }
        });
    });</script>
}