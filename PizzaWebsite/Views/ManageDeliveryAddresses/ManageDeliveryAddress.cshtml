@model PizzaWebsite.Models.ManageDeliveryAddresses.ManageDeliveryAddressViewModel
@if (Model.IsNewRecord())
{
    ViewBag.Title = "Add New Delivery Address";
}
else
{
    ViewBag.Title = "Manage Delivery Address";
}
<h2>@ViewBag.Title</h2>
<div>
    @Html.ActionLink("Back", "Index", new {}, new {@class = "btn btn-primary"})
</div>
@using (Html.BeginForm("SubmitDeliveryAddress", "ManageDeliveryAddresses", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @* Save list state *@
    for (int i = 0; i < Model.StateList.Count(); i++)
    {
        <input type="hidden" name="StateList[@i].Name" value="@Model.StateList.ElementAt(i).Name">
        <input type="hidden" name="StateList[@i].Abbreviation" value="@Model.StateList.ElementAt(i).Abbreviation">
    }
    for (int i = 0; i < Model.AddressTypeList.Count(); i++)
    {
        <input type="hidden" name="AddressTypeList[@i]" value="@Model.AddressTypeList.ElementAt(i)">
    }
    <div class="form-horizontal">
        <hr/>
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        @Html.HiddenFor(model => model.Id)
        <div class="form-group">
            @Html.LabelFor(model => model.Name, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SelectedAddressType, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.SelectedAddressType, new SelectList(Model.AddressTypeList), "Address Type")
                @Html.ValidationMessageFor(model => model.SelectedAddressType, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.StreetAddress, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.StreetAddress, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.StreetAddress, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.City, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.City, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.City, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SelectedState, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.SelectedState, new SelectList(Model.StateList.Select(l => l.Abbreviation)), "State")
                @Html.ValidationMessageFor(model => model.SelectedState, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ZipCode, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.ZipCode, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.ZipCode, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNumber, new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhoneNumber, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (Model.IsNewRecord())
                {
                    <input type="submit" value="Submit" class="btn btn-success"/>
                }
                else
                {
                    <input type="submit" value="Apply Changes" class="btn btn-success"/>
                }
            </div>
        </div>
    </div>
}